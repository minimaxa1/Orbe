// utils/cacheManager.js

// Simple in-memory cache store
const cacheStore = new Map();

// Default Time-To-Live (TTL) for cache entries in milliseconds
// (e.g., 10 minutes = 10 * 60 * 1000)
const DEFAULT_TTL_MS = 10 * 60 * 1000;

/**
 * Generates a consistent cache key from query components.
 * Normalizes the query to ensure case-insensitivity and ignore whitespace.
 * @param {string} type - The type of API call (e.g., 'serper', 'news', 'books-openlib').
 * @param {string} query - The user's search query or topic.
 * @returns {string} A normalized cache key string.
 */
function generateCacheKey(type, query) {
    const normalizedQuery = query.toLowerCase().trim();
    return `${type}:${normalizedQuery}`;
}

/**
 * Stores a value in the cache with an expiry time.
 * @param {string} key - The cache key generated by generateCacheKey.
 * @param {any} value - The data to store (e.g., the structured result from an API client).
 * @param {number} [ttlMs=DEFAULT_TTL_MS] - Optional TTL in milliseconds.
 */
function setCachedResult(key, value, ttlMs = DEFAULT_TTL_MS) {
    const expiry = Date.now() + ttlMs;
    cacheStore.set(key, { value, expiry });
    console.log(`Backend (Cache): Set cache for key "${key}" with TTL ${ttlMs / 1000}s`);
}

/**
 * Retrieves a value from the cache if it exists and hasn't expired.
 * Removes expired entries upon access.
 * @param {string} key - The cache key generated by generateCacheKey.
 * @returns {any | null} The cached value if valid, otherwise null.
 */
function getCachedResult(key) {
    if (cacheStore.has(key)) {
        const entry = cacheStore.get(key);
        if (Date.now() < entry.expiry) {
            // Cache hit and entry is valid
            console.log(`Backend (Cache): HIT for key "${key}"`);
            return entry.value;
        } else {
            // Cache hit but entry expired
            console.log(`Backend (Cache): EXPIRED entry for key "${key}". Deleting.`);
            cacheStore.delete(key);
        }
    }
    // Cache miss or entry was expired
    console.log(`Backend (Cache): MISS for key "${key}"`);
    return null;
}

// Optional: Function to clear the entire cache (e.g., for debugging)
function clearCache() {
    cacheStore.clear();
    console.log("Backend (Cache): Cleared all cache entries.");
}

export { generateCacheKey, setCachedResult, getCachedResult, clearCache };